// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ProtoBuf/code.proto

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunJSClient is the client API for RunJS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunJSClient interface {
	Run(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error)
}

type runJSClient struct {
	cc grpc.ClientConnInterface
}

func NewRunJSClient(cc grpc.ClientConnInterface) RunJSClient {
	return &runJSClient{cc}
}

func (c *runJSClient) Run(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, "/main.RunJS/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunJSServer is the server API for RunJS service.
// All implementations must embed UnimplementedRunJSServer
// for forward compatibility
type RunJSServer interface {
	Run(context.Context, *CodeRequest) (*CodeReply, error)
	mustEmbedUnimplementedRunJSServer()
}

// UnimplementedRunJSServer must be embedded to have forward compatible implementations.
type UnimplementedRunJSServer struct {
}

func (UnimplementedRunJSServer) Run(context.Context, *CodeRequest) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRunJSServer) mustEmbedUnimplementedRunJSServer() {}

// UnsafeRunJSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunJSServer will
// result in compilation errors.
type UnsafeRunJSServer interface {
	mustEmbedUnimplementedRunJSServer()
}

func RegisterRunJSServer(s grpc.ServiceRegistrar, srv RunJSServer) {
	s.RegisterService(&RunJS_ServiceDesc, srv)
}

func _RunJS_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunJSServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RunJS/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunJSServer).Run(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunJS_ServiceDesc is the grpc.ServiceDesc for RunJS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunJS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RunJS",
	HandlerType: (*RunJSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _RunJS_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProtoBuf/code.proto",
}

// RunHSClient is the client API for RunHS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunHSClient interface {
	Compile(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error)
	Run(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error)
}

type runHSClient struct {
	cc grpc.ClientConnInterface
}

func NewRunHSClient(cc grpc.ClientConnInterface) RunHSClient {
	return &runHSClient{cc}
}

func (c *runHSClient) Compile(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, "/main.RunHS/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runHSClient) Run(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, "/main.RunHS/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunHSServer is the server API for RunHS service.
// All implementations must embed UnimplementedRunHSServer
// for forward compatibility
type RunHSServer interface {
	Compile(context.Context, *CodeRequest) (*CodeReply, error)
	Run(context.Context, *CodeRequest) (*CodeReply, error)
	mustEmbedUnimplementedRunHSServer()
}

// UnimplementedRunHSServer must be embedded to have forward compatible implementations.
type UnimplementedRunHSServer struct {
}

func (UnimplementedRunHSServer) Compile(context.Context, *CodeRequest) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedRunHSServer) Run(context.Context, *CodeRequest) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRunHSServer) mustEmbedUnimplementedRunHSServer() {}

// UnsafeRunHSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunHSServer will
// result in compilation errors.
type UnsafeRunHSServer interface {
	mustEmbedUnimplementedRunHSServer()
}

func RegisterRunHSServer(s grpc.ServiceRegistrar, srv RunHSServer) {
	s.RegisterService(&RunHS_ServiceDesc, srv)
}

func _RunHS_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunHSServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RunHS/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunHSServer).Compile(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunHS_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunHSServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RunHS/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunHSServer).Run(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunHS_ServiceDesc is the grpc.ServiceDesc for RunHS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunHS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RunHS",
	HandlerType: (*RunHSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _RunHS_Compile_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _RunHS_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProtoBuf/code.proto",
}

// RunCppClient is the client API for RunCpp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunCppClient interface {
	Compile(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error)
	Run(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error)
}

type runCppClient struct {
	cc grpc.ClientConnInterface
}

func NewRunCppClient(cc grpc.ClientConnInterface) RunCppClient {
	return &runCppClient{cc}
}

func (c *runCppClient) Compile(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, "/main.RunCpp/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runCppClient) Run(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, "/main.RunCpp/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunCppServer is the server API for RunCpp service.
// All implementations must embed UnimplementedRunCppServer
// for forward compatibility
type RunCppServer interface {
	Compile(context.Context, *CodeRequest) (*CodeReply, error)
	Run(context.Context, *CodeRequest) (*CodeReply, error)
	mustEmbedUnimplementedRunCppServer()
}

// UnimplementedRunCppServer must be embedded to have forward compatible implementations.
type UnimplementedRunCppServer struct {
}

func (UnimplementedRunCppServer) Compile(context.Context, *CodeRequest) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedRunCppServer) Run(context.Context, *CodeRequest) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRunCppServer) mustEmbedUnimplementedRunCppServer() {}

// UnsafeRunCppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunCppServer will
// result in compilation errors.
type UnsafeRunCppServer interface {
	mustEmbedUnimplementedRunCppServer()
}

func RegisterRunCppServer(s grpc.ServiceRegistrar, srv RunCppServer) {
	s.RegisterService(&RunCpp_ServiceDesc, srv)
}

func _RunCpp_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCppServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RunCpp/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCppServer).Compile(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunCpp_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCppServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RunCpp/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCppServer).Run(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunCpp_ServiceDesc is the grpc.ServiceDesc for RunCpp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunCpp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RunCpp",
	HandlerType: (*RunCppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _RunCpp_Compile_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _RunCpp_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProtoBuf/code.proto",
}
